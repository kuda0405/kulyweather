{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAGMA,EACE,mCADFA,EAEK,2CAgFIC,MA7Ef,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA4BA,OACE,qBAAKC,UACqB,oBAAhBF,EAAQG,MACfH,EAAQG,KAAKC,MAAQ,GACnB,WAEF,MALH,SAME,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACAG,KAAK,OACLH,UAAU,SACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAzCO,SAAAC,GACI,UAAdA,EAAMC,KACPC,MAAM,GAAD,OAAInB,EAAJ,qBAA4BG,EAA5B,+BAAwDH,IAC5DoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEFnB,EAAS,IACTE,EAAWiB,GACXC,QAAQC,IAAIF,WAqCW,oBAAhBlB,EAAQG,KACjB,gCACA,sBAAKD,UAAU,eAAf,UACA,sBAAKA,UAAU,WAAf,UAECF,EAAQqB,KAFT,IAEgBrB,EAAQsB,IAAIC,WAE5B,qBAAKrB,UAAU,OAAf,SAvCc,SAACsB,GACnB,IAIIC,EADM,CAAC,SAAS,SAAU,UAAW,YAAa,WAAW,SAAS,YAC3DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAAQL,EAAEM,WACVC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YATa,CACX,UAAW,WAAY,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAQvEE,GAAhC,YAA0CE,GA8BnCE,CAAY,IAAIC,WAGrB,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGqC,oBAItB,SClEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.cee777d5.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst api ={\n  key : \"7709e06392b9c91050718a09841f32b0\",\n  baseUrl: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = event =>{\n    if(event.key === \"Enter\" ){\n      fetch(`${api.baseUrl}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result =>\n        { \n          setQuery('');\n          setWeather(result);\n          console.log(result)\n        });\n    }\n  }\n\n  const dateBuilder = (d) =>{\n    let months = [\n      \"January\", \"February\", \"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"\n    ];\n    let days= [\"Sunday\",\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\"Friday\",\"Saturday\"];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = d.getMonth() ;\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${months[month]} ${year}`;\n  }\n\n  return (\n    <div className={\n      (typeof weather.main != 'undefined') ? (\n      (weather.main.temp >= 16)\n      ?  'app warm'\n      : \"app\"\n    ): \"app\"}>\n      <main>\n        <div className=\"search-box\">\n          <input \n          type=\"text\" \n          className=\"search\" \n          placeholder=\"Search...\"\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search}\n          />\n          \n        </div>\n        {(typeof weather.main != 'undefined') ? (\n        <div>\n        <div className=\"location-box\">\n        <div className=\"location\">\n          \n        {weather.name},{weather.sys.country}\n        </div>\n        <div className=\"date\">\n          {dateBuilder(new Date())}\n        </div>\n      </div>\n      <div className=\"weather-box\">\n        <div className=\"temp\">\n          {Math.round(weather.main.temp)}Â°c\n        </div>\n        <div className=\"weather\">\n          {weather.weather[0].description}\n        </div>\n      </div>\n        </div>\n   ) : ('')}\n        \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}